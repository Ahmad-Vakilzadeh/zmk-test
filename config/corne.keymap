/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        change_space: change_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp NUMBER_1>, <&macro_tap>;

            label = "CHANGE_SPACE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE        &kp Q  &kp W  &kp E     &kp R      &kp T        &kp Y    &kp U            &kp I      &kp O    &kp P          &kp BSPC
&kp LEFT_SHIFT    &kp A  &kp S  &kp D     &kp F      &kp G        &kp H    &kp J            &kp K      &kp L    &kp SEMICOLON  &hmr RCMD SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C     &kp V      &kp B        &kp N    &kp M            &kp COMMA  &kp DOT  &kp FSLH       &kp TILDE
                                &kp LGUI  &lt 1 TAB  &kp SPACE    &kp RET  &lt 2 RG(SPACE)  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB           &kp N1  &kp N2  &kp N3    &kp LA(S)      &kp LA(G)        &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp BSPC
&kp LEFT_SHIFT    &kp N4  &kp N5  &kp N6    &kp LA(LS(S))  &kp LS(LA(G))    &kp LEFT    &kp DOWN           &kp UP           &kp RIGHT             &bl BL_CYCLE          &bl BL_TOG
&kp LEFT_CONTROL  &kp N7  &kp N8  &kp N9    &kp N0         &trans           &bt BT_PRV  &bt BT_NXT         &bt BT_CLR       &bt BT_DISC 2         &trans                &trans
                                  &kp LGUI  &trans         &kp SPACE        &kp RET     &trans             &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL                           &kp AT                             &kp HASH                           &kp DLLR                           &kp PRCNT                &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &mt LA(LS(NUMBER_1)) LC(NUMBER_1)  &mt LA(LS(NUMBER_2)) LC(NUMBER_2)  &mt LS(LA(NUMBER_3)) LC(NUMBER_3)  &mt LS(LA(NUMBER_4)) LC(NUMBER_4)  &mt LA(LS(N5)) LC(N5)    &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &mt LS(LA(NUMBER_6)) LC(NUMBER_6)  &mt LS(LA(N7)) LC(N7)              &mt LS(LA(LC(N8))) LC(N8)          &mt LS(LA(N9)) LC(N9)              &kp LA(LS(M))            &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                                                                 &kp LGUI                           &trans                             &kp SPACE                &kp RET    &trans     &kp RALT
            >;
        };
    };
};
